import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:logger/logger.dart';

var logger = Logger();

class GeminiAI {
  final String apiKey = "AIzaSyD1V8tQHQ33Vqfc56FIVWFH6rDz-sMNMTQ";
  late GenerativeModel _model;
  ValueNotifier<String> loadingMessage = ValueNotifier<String>("");

  GeminiAI() {
    _model = GenerativeModel(model: 'gemini-1.5-pro', apiKey: apiKey);
  }

  Future<String> getGeminiResponse(String message) async {
    loadingMessage.value = ".....";
    try {
      final content = [Content.text(message)];
      final response = await _model.generateContent(content);

      return response.text ?? "No response from AI.";
    } catch (e) {
      return "Error: $e";
    }
  }

  String getTranslatedKey(String baseKey, String langCode) {
    switch (langCode.toLowerCase()) {
      case 'ru':
        return '${baseKey}_RU';
      case 'kk':
      case 'kz':
        return '${baseKey}_KZ';
      default:
        return baseKey;
    }
  }

  Future<List<Map<String, dynamic>>> fetchSimilarClinics(
    String category,
    String country,
    String selectedLanguageCode,
  ) async {
    FirebaseFirestore firestore = FirebaseFirestore.instance;
    String categoryField;
    String nameField;
    String countryField;
    String cityFiled;
    switch (selectedLanguageCode) {
      case 'ru':
        categoryField = 'Category_RU';
        nameField = 'Clinics_RU';
        countryField = 'Country_RU';
        cityFiled = 'City_RU';
        break;
      case 'kk':
        categoryField = 'Category_KZ';
        nameField = 'Clinics_KZ';
        countryField = 'Country_KZ';
        cityFiled = 'City_KZ';
        break;
      default:
        categoryField = 'Category';
        nameField = 'Clinics';
        countryField = 'Country';
        cityFiled = 'City';
    }

    QuerySnapshot clinicSnapshot =
        await firestore
            .collection('translation_clinics')
            .where(categoryField, isEqualTo: category)
            .where(countryField, isEqualTo: country)
            .get();

    List<Map<String, dynamic>> fetchedClinics =
        clinicSnapshot.docs.map((doc) {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
          return {
            'name': data[nameField] ?? '',
            'rating': data['rating'] ?? 0,
            'reviews': data['Review'] ?? [],
            'availability': data['Availability'] ?? '',
            'country': data[countryField] ?? '',
            'city': data[cityFiled] ?? '',
          };
        }).toList();

    return fetchedClinics;
  }

Future<Map<String, dynamic>?> getClinicByName(
  String clinicName,
  String selectedLanguageCode,
) async {
  FirebaseFirestore firestore = FirebaseFirestore.instance;
  String nameField;
  String countryField;
  String cityField;
  switch (selectedLanguageCode) {
    case 'ru':
      nameField = 'Clinics_RU';
      countryField = 'Country_RU';
      cityField = 'City_RU';
      break;
    case 'kk':
      nameField = 'Clinics_KZ';
      countryField = 'Country_KZ';
      cityField = 'City_KZ';
      break;
    default:
      nameField = 'Clinics';
      countryField = 'Country';
      cityField = 'City';
  }

  logger.w("üîç Searching for clinic: '${clinicName.trim()}' using field '$nameField'");

  QuerySnapshot snapshot = await firestore
      .collection("translation_clinics")
      .where(nameField, isEqualTo: clinicName.trim())
      .limit(1)
      .get();

  if (snapshot.docs.isNotEmpty) {
    Map<String, dynamic> clinicData = snapshot.docs.first.data() as Map<String, dynamic>;

    return {
      'name': clinicData[nameField] ?? 'Unknown',
      'rating': clinicData['rating'] ?? 0,
      'reviews': (int.tryParse(clinicData['Review'].toString()) ?? 0).abs(),
      'availability': clinicData['Availability'] ?? '',
      'country': clinicData[countryField] ?? '',
      'city': clinicData[cityField] ?? '',
    };
  }

  logger.w("Clinic '$clinicName' not found in Firestore.");
  return null;
}


  Future<String> analyzeClinic(
    String clinicName,
    String category,
    String country,
    String selectedLanguageCode,
  ) async {
    loadingMessage.value = ".....";

    List<Map<String, dynamic>> similarClinics = await fetchSimilarClinics(
      category,
      country,
      selectedLanguageCode,
    );

    logger.w(similarClinics);

    if (similarClinics.isEmpty) {
      return "No similar clinics found for category '$category'.";
    }

    Map<String, dynamic>? targetClinic = await getClinicByName(clinicName, selectedLanguageCode);
    logger.w(targetClinic);

    if (targetClinic == null || targetClinic['name'] == null) {
      return "Clinic '$clinicName' not found in the database.";
    }

    similarClinics.sort(
      (a, b) => (b['rating'] ?? 0).compareTo(a['rating'] ?? 0),
    );

    String prompt;
    switch (selectedLanguageCode) {
      case 'ru':
        prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–ª–∏–Ω–∏–∫—É '${targetClinic['name']}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '$category'.  
–°—Ä–∞–≤–Ω–∏ –µ—ë —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ—Ö–æ–∂–∏–º–∏ –∫–ª–∏–Ω–∏–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:  

- ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${targetClinic['rating']}  
- üí¨ –û—Ç–∑—ã–≤—ã: ${targetClinic['reviews']}  
- üåç –°—Ç—Ä–∞–Ω–∞: ${targetClinic['country']}  
- üïí –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${targetClinic['availability']}  

–ü–æ—Ö–æ–∂–∏–µ –∫–ª–∏–Ω–∏–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:  
${similarClinics.map((c) => "- ${c['name']}: ${c['rating']}‚≠ê, ${c['country']}").join("\n")}  

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π AI-–∞–Ω–∞–ª–∏–∑, –æ–±—ä—è—Å–Ω–∏, —á–µ–º —ç—Ç–∞ –∫–ª–∏–Ω–∏–∫–∞ –ª—É—á—à–µ –∏–ª–∏ —Ö—É–∂–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.
""";
        break;
      case 'kk':
        prompt = """
'${targetClinic['name']}' –∫–ª–∏–Ω–∏–∫–∞—Å—ã–Ω '$category' —Å–∞–Ω–∞—Ç—ã–Ω–¥–∞ —Ç–∞–ª–¥–∞“£—ã–∑.  
–û–Ω—ã –±–∞—Å“õ–∞ “±“õ—Å–∞—Å –∫–ª–∏–Ω–∏–∫–∞–ª–∞—Ä–º–µ–Ω —Å–∞–ª—ã—Å—Ç—ã—Ä—ã“£—ã–∑:  

- ‚≠ê –û—Ä—Ç–∞—à–∞ —Ä–µ–π—Ç–∏–Ω–≥: ${targetClinic['rating']}  
- üí¨ –ü—ñ–∫—ñ—Ä–ª–µ—Ä —Å–∞–Ω—ã: ${targetClinic['reviews']}  
- üåç –ï–ª: ${targetClinic['country']}  
- üïí “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫: ${targetClinic['availability']}  

–ë“±–ª —Å–∞–Ω–∞—Ç—Ç–∞“ì—ã –±–∞—Å“õ–∞ “±“õ—Å–∞—Å –∫–ª–∏–Ω–∏–∫–∞–ª–∞—Ä:  
${similarClinics.map((c) => "- ${c['name']}: ${c['rating']}‚≠ê, ${c['country']}").join("\n")}  

–û—Å—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ “õ—ã—Å“õ–∞ AI-—Ç–∞–ª–¥–∞—É –∂–∞—Å–∞“£—ã–∑, –±“±–ª –∫–ª–∏–Ω–∏–∫–∞–Ω—ã“£ –±–∞—Å“õ–∞–ª–∞—Ä–¥–∞–Ω –∞—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã–Ω –Ω–µ–º–µ—Å–µ –∫–µ–º—à—ñ–ª—ñ–∫—Ç–µ—Ä—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ“£—ñ–∑.
""";
        break;
      default:
        prompt = """
Analyze the clinic '${targetClinic['name']}' in the category '$category'.  
Compare it with other similar clinics based on:  

- ‚≠ê Average Rating: ${targetClinic['rating']}  
- üí¨ Reviews: ${targetClinic['reviews']}  
- üåç Country: ${targetClinic['country']}  
- üïí Availability: ${targetClinic['availability']}  

Other similar clinics in this category:  
${similarClinics.map((c) => "- ${c['name']}: ${c['rating']}‚≠ê, ${c['country']}").join("\n")}  

Based on this data, provide a concise AI-driven analysis explaining why this clinic is better or worse than others.
""";
    }

    return await getGeminiResponse(prompt);
  }

Future<String> findArticles(String clinicName, String selectedLanguageCode) async {
  loadingMessage.value = ".....";

  Map<String, dynamic>? clinic = await getClinicByName(clinicName, selectedLanguageCode);

  if (clinic == null || clinic['name'] == null) {
    return "Clinic '$clinicName' not found in the database.";
  }

  String city = clinic['city'] ?? 'Unknown City';
  String country = clinic['country'] ?? 'Unknown Country';

  String prompt = "";

switch (selectedLanguageCode) {
  case 'ru':
    prompt = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–°–¥–µ–ª–∞–π –≤–∏–¥, —á—Ç–æ —Ç—ã –∏—â–µ—à—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ  —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ –∫–ª–∏–Ω–∏–∫–µ '$clinicName', —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π –≤ –≥–æ—Ä–æ–¥–µ $city, $country.
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å 3-5 —Å—Ç–∞—Ç–µ–π —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–µ.
–§–æ—Ä–º–∞—Ç:
- –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
- –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
- –°—Å—ã–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏](https://—Ä–µ–∞–ª—å–Ω–∞—è-—Å—Å—ã–ª–∫–∞.com)
""";
    break;
  case 'kk':
    prompt = """
–°–µ–Ω –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±–∞—Ç—ã–Ω –∫”©–º–µ–∫—à—ñ—Å—ñ“£.
'$clinicName' –∫–ª–∏–Ω–∏–∫–∞—Å—ã —Ç—É—Ä–∞–ª—ã $city, $country “õ–∞–ª–∞—Å—ã–Ω–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω –±–∞—Ä–ª—ã“õ –º–∞“õ–∞–ª–∞–ª–∞—Ä–¥—ã(3-5) —Ç–∞—É—ã–ø –∂–∞—Ç“õ–∞–Ω–¥–∞–π –±–æ–ª.
–¢–µ–∫ –Ω–∞“õ—Ç—ã –∞“õ–ø–∞—Ä–∞—Ç –ø–µ–Ω —à—ã–Ω —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä–¥—ñ “õ–æ–ª–¥–∞–Ω—ã–ø, ”ô—Ä –º–∞“õ–∞–ª–∞ “Ø—à—ñ–Ω “õ—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ –∂”ô–Ω–µ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –∫”©—Ä—Å–µ—Ç.
–§–æ—Ä–º–∞—Ç:
- –ú–∞“õ–∞–ª–∞ –∞—Ç–∞—É—ã
- “ö—ã—Å“õ–∞—à–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞
- –°—ñ–ª—Ç–µ–º–µ–Ω—ñ [–°—ñ–ª—Ç–µ–º–µ –º”ô—Ç—ñ–Ω—ñ](https://–Ω–∞—Å—Ç–æ—è—â–∏–π-—Å—ñ–ª—Ç–µ–º–µ.com) —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –±–µ—Ä.
""";
    break;
  default: 
    prompt = """
You are an assistant that helps find information.
Pretend you are searching the internet for all articles about the clinic '$clinicName' located in $city, $country.
Use only real sources and links. Provide 3-5 article summaries with titles and a real link for each.
Format:
- Article Title
- Short Summary
- Link in the format [Link Text](https://real-link.com)
""";
}


  return await getGeminiResponse(prompt);
}

}
